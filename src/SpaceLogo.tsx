import { useRef, useEffect, useState, useMemo } from 'react';
import styled from 'styled-components';
import { OrbitControls, Environment } from '@react-three/drei'
import { Canvas, useFrame } from '@react-three/fiber'
import { SVGLoader } from 'three/addons/loaders/SVGLoader.js';
import { Mesh, ShapePath } from 'three'

interface SpaceLogoProps {
}

const Wrapper = styled.div`
  position: relative;
  width: 100%;
  height: 100%;
`

export const SpaceLogo = ({
  ...props
}: SpaceLogoProps) => {
  const spheres = [];
  for(let z=-100; z < 100; z+=1) {
    const x = Math.random() * 200 - 100;
		const y = Math.random() * 200 - 100;
    spheres.push(<Sphere x={x} y={y} z={z}/>)
  }
  return (
    <Wrapper
      {...props}
    >
      <Canvas shadows camera={{ position: [0, 0, 100.5], fov: 50 }}>
        <Logo />
        {spheres}
        <OrbitControls enablePan={false} enableZoom={false} minPolarAngle={Math.PI / 2.1} maxPolarAngle={Math.PI / 2.1} />
        <color attach="background" args={[0,0,0]} />
        <Env />
      </Canvas>
    </Wrapper>
  );
};


interface SvgProps {
    paths:ShapePath[]
}

function Logo() {
  const [ svgData, setSvgData ] = useState<SvgProps|null>(null);


  useEffect(() => {
    const loader = new SVGLoader();
    const data = loader.parse('<svg width="19" height="16" viewBox="0 0 19 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M7.13209 0.218117C6.45463 0.31883 5.76282 0.553022 5.40191 0.662123C4.67514 0.882117 3.49494 1.56535 3.07826 1.89323C2.88118 2.0482 2.46671 2.4541 2.30608 2.65842C2.14983 2.85742 1.85109 3.28864 1.6605 3.55435C1.35731 3.9927 1.0001 4.64578 0.697065 5.24686C0.358629 5.9182 0.335375 6.11276 0.233166 6.67394L0.00943184 7.66356C-0.0114975 7.83453 -0.0289192 8.46214 0.343376 8.55017C0.715553 8.63809 1.05951 8.46807 1.22167 8.21987C1.44615 7.87611 1.41521 7.38806 1.66909 6.82965C1.86713 6.3782 1.95365 5.72223 2.26989 5.25037L2.51783 4.83546C2.95662 4.16717 3.41394 3.63649 3.68679 3.29047C3.92684 2.99988 4.37549 2.60467 4.8008 2.32324C5.19402 2.08737 5.82947 1.81826 6.28817 1.67979C6.43429 1.63271 7.05941 1.45079 7.44806 1.39957C7.97554 1.34091 8.32245 1.25849 8.82349 1.22342C9.44218 1.18032 9.73903 1.12575 10.5415 1.21855C10.8455 1.30023 11.3273 1.33252 11.7607 1.49662C12.1108 1.63802 12.5977 1.86628 13.0749 2.14358C13.5882 2.42228 14.3676 2.99196 14.8844 3.47849C15.4053 4.02929 15.6658 4.32472 16.0249 5.02289C16.1841 5.36845 16.4917 5.90279 16.6156 6.28006C16.7003 6.66298 16.862 7.37726 16.8347 7.72422C16.8226 8.34571 16.8775 8.47384 16.8303 8.98186C16.8286 9.43924 16.6769 9.75632 16.6138 10.1304C16.5598 10.389 16.3091 11.2832 16.1542 11.4909C15.4495 12.9934 14.5036 13.644 13.4493 14.1134C13.1523 14.263 12.2225 14.5093 11.9535 14.58C11.4948 14.6618 10.8912 14.7165 10.3103 14.7276C9.69915 14.7395 8.8566 14.6576 8.3454 14.4713C7.79234 14.2699 7.15244 13.9838 7.15981 13.9917C6.903 13.8517 6.51128 13.6233 6.38932 13.5227C6.15345 13.3731 6.01147 13.3152 5.87165 13.1712C5.66995 12.9967 5.54804 12.8962 5.3953 12.6799C5.31027 12.5579 5.17527 12.3714 5.04361 12.2064C4.90226 11.9769 4.82094 11.7351 4.68267 11.4362C4.51731 10.9937 4.54301 11.0151 4.51164 10.5451C4.48208 10.4088 4.51487 9.9512 4.53978 9.8735C4.61416 9.45129 4.58799 9.07859 4.68563 8.66856C4.81756 8.11381 4.92722 7.69844 5.09565 7.16624C5.2541 6.56699 5.71922 6.01189 6.0683 5.61528C6.28463 5.3695 6.95551 4.78901 7.88643 4.42637C8.14863 4.33904 8.57777 4.24016 8.85014 4.19097C9.4317 4.13078 9.52638 4.16932 10.0831 4.20969C10.2747 4.24277 10.7199 4.3328 10.8834 4.38963C11.3616 4.55587 11.5376 4.66162 12.0266 4.95798C12.2543 5.08869 12.4259 5.18882 12.6585 5.40472C12.8444 5.57491 12.9769 5.86379 13.1274 6.03339C13.3335 6.31083 13.5629 6.68108 13.7168 7.08015C13.8837 7.47723 13.9374 8.03627 13.9122 8.39598C13.9122 8.67012 13.8367 9.17201 13.8067 9.28185C13.7768 9.39185 13.702 9.73257 13.6857 9.80099C13.6694 9.86925 13.4903 10.2299 13.4657 10.282C13.3646 10.4947 13.1713 10.8005 12.8454 11.1126C12.6051 11.3725 12.1406 11.6274 11.7927 11.7261C11.4809 11.8956 10.9548 11.9242 10.6638 11.9248C10.5206 11.9163 10.1548 11.8939 9.96368 11.8486C9.57676 11.7568 9.50513 11.7542 9.10604 11.5827C8.74805 11.4184 8.50508 11.3592 8.25581 11.177C8.25581 11.177 7.91335 10.9114 7.75769 10.7173C7.67562 10.6148 7.5349 10.1264 7.56001 9.82384C7.57167 9.40956 7.51074 9.17459 7.59631 8.83391C7.68177 8.49319 7.82761 8.09809 7.98556 7.85462C8.14571 7.60826 8.48998 7.36798 8.88171 7.17673C9.10095 7.06946 9.62063 6.97016 9.84097 6.94437C10.2599 6.89534 10.6102 7.0832 10.8229 7.29835C11.0073 7.50707 11.3719 7.94028 11.2266 8.38822C11.0952 8.79354 10.9367 9.22549 10.3221 9.1935C9.90053 9.28033 9.4129 9.15419 9.25062 9.22822C9.00934 9.36369 8.91679 9.66279 9.00458 9.87135C9.06571 10.2736 9.45496 10.3219 9.87037 10.3524C10.2422 10.414 11.1862 10.234 11.3939 10.0801C11.533 9.99828 11.7462 9.80157 11.8963 9.66887C12.0043 9.57335 12.1265 9.36033 12.2098 9.20735C12.3122 9.01934 12.3641 8.88099 12.3904 8.75847C12.4217 8.61313 12.4861 8.33549 12.4617 8.05788C12.4453 7.87061 12.3946 7.79092 12.3441 7.51714C12.2437 7.20677 12.119 6.97043 11.9182 6.70136C11.6568 6.4387 11.3246 6.12602 11.0005 5.9808C10.7146 5.83133 10.2139 5.77649 9.76076 5.8027C9.39319 5.83742 8.95822 5.88161 8.67075 5.97714C8.17882 6.15103 8.03822 6.18574 7.63419 6.43776C7.29284 6.6468 6.94948 7.03124 6.75811 7.35C6.35037 8.17521 6.11663 9.09338 6.28664 10.3296C6.30047 10.5384 6.36622 10.7424 6.49787 11.0188C6.61936 11.2741 6.83245 11.5844 7.15212 11.8183C7.28082 11.9363 7.48394 12.0813 7.64913 12.1663C7.88379 12.3073 8.04145 12.3806 8.28643 12.5023C8.50137 12.6022 8.75207 12.7165 9.0788 12.8064C9.43277 12.9449 9.70471 12.9507 10.1498 13.0164C10.5884 13.1252 11.7878 13.0475 12.5024 12.7356C12.99 12.5326 13.5372 12.175 13.9533 11.7389C14.1844 11.4994 14.4104 11.0644 14.477 10.9756C14.8077 10.3461 14.8725 9.75422 14.9255 9.62987C14.9977 9.46089 15.0334 9.08195 15.0818 8.82279C15.1363 8.53235 15.1024 7.31372 14.806 6.53145C14.6388 6.22003 14.541 5.94242 14.428 5.79646C14.2246 5.51031 14.1265 5.33159 13.9535 5.12864C13.6929 4.81581 13.5031 4.56059 13.2492 4.38081C12.6021 3.86 12.0619 3.58559 11.3308 3.24183C10.4225 2.87588 10.1498 2.95159 9.29019 2.96516C8.90343 2.96851 8.34079 3.08874 8.06412 3.13855C7.55027 3.20618 7.25591 3.3287 6.90837 3.4247C6.53682 3.52724 6.32188 3.69118 6.01718 3.87358C5.76605 4.03401 5.4709 4.25373 5.27578 4.43215C4.77676 4.79416 4.5358 5.17494 4.23 5.64254C4.17458 5.72102 3.81119 6.48699 3.75329 6.70043C3.72653 6.80727 3.64446 7.11397 3.59164 7.29317C3.52388 7.57748 3.49093 7.82934 3.41533 8.15009C3.34741 8.48055 3.23227 9.10465 3.18221 9.68791C3.09829 10.1882 3.23286 11.2096 3.31233 11.523C3.48907 12.1077 3.79827 12.8211 4.40892 13.5082C4.66836 13.8124 4.94397 14.0484 5.26269 14.3042C5.50645 14.5053 5.71525 14.6225 6.09172 14.8448C6.60304 15.1467 6.99197 15.3394 7.70858 15.6165C8.00034 15.7093 8.36791 15.8311 8.76405 15.9123C9.53162 15.9824 10.3203 16.0497 11.1813 15.9484C12.0423 15.8472 12.9047 15.6071 13.4142 15.4522C13.6954 15.3478 14.24 15.1218 14.4683 15.0001C14.6169 14.9253 15.115 14.5884 15.1995 14.5072C15.5409 14.2983 16.3049 13.5872 16.7981 12.9247C16.9062 12.7199 17.2948 12.1055 17.379 11.8363C17.6031 11.381 17.7593 10.8304 17.8511 10.5953C17.948 10.0463 18.1113 9.69247 18.1754 9.14124C18.168 9.01154 18.2016 8.7062 18.2314 8.53723C18.1879 8.15996 18.2461 7.8045 18.1703 7.39388C18.1038 7.04723 18.0159 6.90248 17.9949 6.58922C17.9744 6.45512 17.8002 6.05211 17.7537 5.8728C17.6131 5.57732 17.5781 5.33385 17.3945 5.00397C17.1299 4.48944 16.8535 3.89764 16.4286 3.38066C16.3073 3.22054 15.9631 2.83578 15.8459 2.70246C15.5688 2.42852 15.4062 2.3851 15.0916 2.10991C15.059 2.08963 14.8513 1.85517 14.6338 1.7747C14.2736 1.49924 13.962 1.39821 13.6193 1.14756C12.932 0.808827 12.6816 0.694578 11.9992 0.413617C11.6051 0.274326 11.0552 0.197563 10.8572 0.121501C10.4806 0.0983706 10.0982 -0.0206375 9.70222 0.00311756C9.2574 -0.00113869 8.80918 0.0303822 8.36235 0.0704813C8.05872 0.0892038 7.66561 0.103675 7.1321 0.218119" fill="white"/></svg>');  
    setSvgData(data);
  }, [])

  const shapes = useMemo(
    () => {

      if(!svgData) return;

      return svgData.paths.flatMap((path, index) =>
        path.toShapes(true).map(shape => ({ index, shape, color: path.color }))
      )

    },[svgData]
  )

  return (
    <group position={[0, 0, 0]}>
      <group position={[-30,25,0]} scale={[3,-3,3]}>
        {shapes && shapes.map((props, key) => {
          return (
            <SvgShape key={key} {...props}/>
          )
        })}
      </group>
    </group>
  )
}

interface SvgShapeProps {
  shape:any,
  index:number
}

const SvgShape = ({ shape, index }:SvgShapeProps) => (
    <mesh receiveShadow castShadow position={[0, 0, 0]}>
      <meshStandardMaterial
        attach="material"
        color={"white"}
        metalness={0.6} 
        roughness={0.2}
        /*
          HACK: Offset SVG polygons by index
          The paths from SVGLoader Z-fight.
          This fix causes stacking problems with detailed SVGs.
        */
        polygonOffset
        polygonOffsetFactor={index * -0.1}
      />
      <extrudeGeometry attach="geometry" args={[shape, { depth: 1.5, bevelEnabled: false}]} />
    </mesh>
  )


interface SphereProps {
  x:number,
  y:number,
  z:number
}

function Sphere({x,y,z,...props}:SphereProps) {
  const ref = useRef<Mesh>(null!)

  useFrame(() => {
    // This function runs at the native refresh rate inside of a shared render-loop
    ref.current.position.z +=  1;

    if(ref.current.position.z > 100) ref.current.position.z-=200; 
  })

  return (
    <mesh visible position={[x, y, z]} {...props} ref={ref}>
      <sphereGeometry args={[0.1, 32, 32]} />
      <meshStandardMaterial color="white" emissive={"white"} emissiveIntensity={2}/>
    </mesh>
  )
}

function Env() {
  return <Environment preset='sunset' blur={1} />
}